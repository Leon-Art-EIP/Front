name: CI/CD Workflow

on:
  push:
    branches:
      - dev
      - main
  pull_request:
    branches:
      - dev
      - main

jobs:
  install:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install dependencies
        run: |
          sudo dnf install openssl1.1 -y
          npm install -g yarn
          yarn install --network-timeout 100000

  test:
    runs-on: ubuntu-latest
    needs: install
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run tests and clean logs
        run: |
          yarn run coverage | tee tests.log
          sed -r "s/\\x1B\\[([0-9]{1,2}(;[0-9]{1,2})?)?[mGK]//g" tests.log > tests_clean.log

  docker-push:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to DockerHub
        run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

      - name: Build and Push Docker Image
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            IMAGE_TAG="prod"
          else
            IMAGE_TAG="dev"
          fi
          docker buildx build -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO_FRONT }}:${IMAGE_TAG} \
                              -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO_FRONT }}:${{ github.run_number }} \
                              --no-cache .
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO_FRONT }}:${IMAGE_TAG}
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO_FRONT }}:${{ github.run_number }}

      - name: Cleanup Docker Images
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            IMAGE_TAG="prod"
          else
            IMAGE_TAG="dev"
          fi
          docker rmi ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO_FRONT }}:${IMAGE_TAG}
          docker rmi ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO_FRONT }}:${{ github.run_number }}

  notify:
    runs-on: ubuntu-latest
    needs: [test, docker-push]
    steps:
      - name: Send Discord Notification
        run: |
          curl -H "Content-Type: application/json" \
            -d '{
              "content": "Build completed successfully",
              "embeds": [
                {
                  "title": "CI/CD Workflow",
                  "description": "Branch: ${{ github.ref }}\nBuild Number: ${{ github.run_number }}",
                  "footer": { "text": "GitHub Actions" }
                }
              ]
            }' \
            https://discord.com/api/webhooks/1123846491438583859/SlPmshTyfkaePCJ0xJZIhja219nY5mezlxGGSyPWRhzUvxnxI2gG2PZ9RK-jRR3Hb3ne
